<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE pam_mount SYSTEM "pam_mount.conf.xml.dtd">
<!--
See pam_mount.conf(5) for a description.
-->

<pam_mount>

    <!-- debug should come before everything else,
         since this file is still processed in a single pass
         from top-to-bottom -->

    <debug enable="{{ pam_mount.get('debug', False) | int }}" />

    <!-- Volume definitions -->
{#- Mount points must be sorted for `~` being before `~/foo` #}
{%- for mount_point, param in pam_mount | traverse("volumes", {}) | dictsort %}
    <volume mountpoint="{{ mount_point }}"

{%-   for name, value in param | traverse("parameters", {}) | dictsort %}
{%-     if value is mapping %}
{#-       sub options are comma separated list #}
{%-       set options = [] %}
{%-       for option in value | dictsort %}
{%-         if option.1 is sameas false %}
{#-           skip any `option: false` #}
{%-           continue %}
{%-         elif option.1 is sameas true %}
{%-           do options.append(option.0) %}
{%-         else %}
{%-           do options.append(option | join("=")) %}
{%-         endif %}
{%-       endfor %}
           {{ {name: options | join(",")} | xmlattr }}
{%-     else %}
           {{ {name: value} | xmlattr }}
{%-     endif %}
{%-   endfor %}

{%-   set controls = param | traverse("user_control", False) %}
{%-   if not controls -%}
{#-   Use of `</volume>` requires extended user control #}
    />
{%-   else -%}
    >
{%-     for cond in controls recursive %}
{%-       set name = cond | first %}
{%-       set value = cond.get(name) %}
{{ " " * (4 + 4 * loop.depth) ~ "<" ~ name ~ ">" }}
{%-       if value is string -%}
{{ value ~ "</" ~ name ~ ">" }}
{%-       else -%}
{{ loop(value) }}
{{ " " * (4 + 4 * loop.depth) ~ "</" ~ name ~ ">" }}
{%-       endif %}
{%-     endfor %}
    </volume>
{%   endif %}
{%- endfor %}

    <!-- pam_mount parameters: General tunables -->

    <!--
        <luserconf name=".pam_mount.conf.xml" />
    -->

    <!-- Note that commenting out mntoptions will give you the defaults.
         You will need to explicitly initialize it with the empty string
         to reset the defaults to nothing. -->
    <mntoptions allow="nosuid,nodev,loop,encryption,fsck,nonempty,allow_root,allow_other" />
    <!--
        <mntoptions deny="suid,dev" />
        <mntoptions allow="*" />
        <mntoptions deny="*" />
    -->
    <mntoptions require="nosuid,nodev" />

    <!-- requires ofl from hxtools to be present -->
    <logout wait="0" hup="no" term="no" kill="no" />


    <!-- pam_mount parameters: Volume-related -->
    <mkmountpoint enable="{{ pam_mount.get('mkdir', True) | int }}" remove="{{ pam_mount.get('rmdir', True) | int }}" />

</pam_mount>
